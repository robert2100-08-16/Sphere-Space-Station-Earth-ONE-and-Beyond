name: Selective Publish

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'publish/**'

jobs:
  selective-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install YAML parser
        run: pip install pyyaml

      - name: Get changed files
        run: |
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run selective publish
        run: |
          mkdir -p publish/
          python3 <<'PYTHON'
          import os
          import yaml
          import shutil

          changed_files = os.environ.get('CHANGED_FILES', '').splitlines()
          try:
              with open('publish.yml') as f:
                  entries = yaml.safe_load(f).get('publish', [])
          except Exception as e:
              print(f"⚠ Fehler beim Laden von publish.yml: {e}")
              exit(1)

          for entry in entries:
              path = entry.get('path')
              out = entry.get('out')
              type_ = entry.get('type')
              
              if not path or not out or not type_:
                  print(f"⚠ Ungültiger Eintrag übersprungen: {entry}")
                  continue

              relevant = any(cf == path or cf.startswith(f"{path}/") for cf in changed_files)
              if relevant:
                  print(f"✔ Änderungen in «{path}» → Generiere «{out}»")
                  if type_ == 'file':
                      shutil.copy(path, f"publish/{out}")
                  elif type_ == 'folder':
                      combined = []
                      for root, _, files in os.walk(path):
                          for fname in sorted(files):
                              if fname.endswith('.md'):
                                  with open(os.path.join(root, fname)) as infile:
                                      combined.append(infile.read())
                      with open(f"publish/{out}", "w") as outfile:
                          outfile.write("\n\n".join(combined))
                  else:
                      print(f"⚠ Unbekannter Typ «{type_}» für {path}")
              else:
                  print(f"ℹ Keine Änderungen in «{path}» → Überspringe «{out}»")
          PYTHON

      - name: Commit and push changes
        run: |
          if [[ -n "$(git status --porcelain publish)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add publish
            git commit -m "chore: update published artifacts" || true
            git push
          else
            echo "No publish changes to commit."
